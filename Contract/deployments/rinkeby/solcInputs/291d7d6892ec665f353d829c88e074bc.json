{
  "language": "Solidity",
  "sources": {
    "contracts/Fundme.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n//Style Guide for Solidiyt\r\n//Pragma\r\n//Import\r\n//Error Codes\r\n//contracts\r\n//modifiers\r\n//revcieve and fallback\r\n//functions\r\n\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n//Send Eth or blockchain native token to this contract \r\n//Get funds from users\r\n//Withdraw funds\r\n//set mim value in USD \r\nimport \"./PriceConverter.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n//best practice to put contractName + error code\r\nerror FunMe_Owner();\r\n\r\n\r\n/**@title A contract for crowd funding \r\n *@author Sydney Sanders\r\n @notice This contract is to demo a funding contract \r\n @dev ths implements price feeds as our library \r\n\r\n\r\n */\r\n\r\n\r\ncontract Fundme { \r\n    //Type declerations\r\n    using PriceConverter for uint256;\r\n\r\n\r\n    //State variables\r\n    mapping(address => uint256) private s_addressToAmountFunded; \r\n    //Keep track of who is funding the contract:  \r\n    address[]private s_funders; \r\n    uint256 public constant  MIN_USD = 50 * 10 ** 18;\r\n    //owner doesnt have to be public \r\n    address private immutable i_owner; \r\n    AggregatorV3Interface private s_priceFeed;\r\n\r\n    event Funded(address indexed from, uint256 amount); \r\n\r\n     modifier onlyOwner { \r\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\r\n         if(msg.sender != i_owner) {revert FunMe_Owner();}\r\n        _;\r\n    }\r\n    //Function that gets called, Immeditaley when you call an contract \r\n    constructor(address priceFeedAdderss) { \r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAdderss); //s_ == we are spending lots of gas to store this\r\n    }\r\n\r\n\r\n    receive() external payable{}\r\n    fallback() external payable{}\r\n\r\n\r\n    function fund() public payable { \r\n        require(msg.value.getConverstionRate(s_priceFeed) >= MIN_USD,\"Didn't send enough\" );\r\n        //Keep track of donators to contract address\r\n        s_funders.push(msg.sender); \r\n        s_addressToAmountFunded[msg.sender] += msg.value;\r\n        emit Funded(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n    function withdraw()  public onlyOwner {\r\n        //very expensive function -> reading from storage and updating from storage\r\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) { \r\n            address funder = s_funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        //reset the array \r\n         s_funders = new address[](0);\r\n        //actually withdraw the funds\r\n        \r\n        //3 different ways to send ETH\r\n        //transfer send call \r\n        \r\n        //cast it to an payable address \r\n        //Auto reverts if transfer failes\r\n        payable(msg.sender).transfer(address(this).balance); //Natie blockchain currency \r\n\r\n        //send only revert if we add the sendSuccess require\r\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        require(sendSuccess, \"Send failed\");\r\n\r\n        //call most common way of sending \r\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call Failed\");\r\n\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwner  { \r\n        //saved our storage var into a memory var -> get much much cheaper \r\n        address[] memory funders = s_funders; \r\n        //mappings can't be in memory!\r\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) { \r\n            address funder = funders[funderIndex]; //we are using the memory array\r\n            s_addressToAmountFunded[funder] = 0;\r\n\r\n        }\r\n\r\n        s_funders = new address[](0);\r\n        (bool success,) = i_owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    //Be carefully how to interact with storage variables + chaging visiblity improves gas\r\n    function getOwner() public view returns(address) { \r\n        return i_owner;\r\n    }\r\n    function getFunders(uint256 index) public view returns(address) { \r\n       return s_funders[index];\r\n   }\r\n\r\n    function getAddressToAmountFunded(address funder) public view returns(uint256) { \r\n        return s_addressToAmountFunded[funder];\r\n    }\r\n\r\n    function getPriceFeed() public view returns(AggregatorV3Interface) { \r\n        return s_priceFeed;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n "
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter { \r\n    //Can't have state vars\r\n    //Can't send ether \r\n\r\n     //get the converion rate of ETH in terms of USD \r\n    function getPrice(AggregatorV3Interface priceFeed)   internal view returns(uint256) { \r\n         //call the latestround data on the price feed\r\n         //All we want is the latest price\r\n         (, int256 price, , , ) = priceFeed.latestRoundData();    \r\n         //Eth in terms of USD\r\n         return uint256(price * 1e10); //1*10 = 1000000000\r\n    }\r\n\r\n    function getVersion()   internal view returns(uint256) { \r\n        //ABI\r\n        //ADDRESS \t0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\r\n        return priceFeed.version(); \r\n    }\r\n\r\n    function getConverstionRate(uint256 ethAmount, AggregatorV3Interface priceFeed )  internal view returns (uint256) { \r\n        uint256 ethPrice = getPrice(priceFeed); //call get price for price of ETH \r\n        uint256 ethAmountinUSD = (ethPrice * ethAmount) / 10**18;  //Math in solidity always multiply then divide\r\n        return ethAmountinUSD;\r\n\r\n    }\r\n\r\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}