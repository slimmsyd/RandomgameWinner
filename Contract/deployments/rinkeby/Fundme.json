{
  "address": "0xE30B64D0dB62300dfe242b9B723F4c1E42232365",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdderss",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FunMe_Owner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x101d46e1a6b1c8c51bf2184a9de6117c7a5ac3baa087536b56bafc8bc45b1ce6",
  "receipt": {
    "to": null,
    "from": "0xD49a9a33F180D1e35A30F0ae2Dbfe5716a740Ebc",
    "contractAddress": "0xE30B64D0dB62300dfe242b9B723F4c1E42232365",
    "transactionIndex": 13,
    "gasUsed": "1114469",
    "logsBloom": "0x
    "blockHash": "0xe1cc8b5ac5fdf721735c45d37340c262838f292c9e66043878e7e2606962ed3f",
    "transactionHash": "0x101d46e1a6b1c8c51bf2184a9de6117c7a5ac3baa087536b56bafc8bc45b1ce6",
    "logs": [],
    "blockNumber": 10772970,
    "cumulativeGasUsed": "4329962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "291d7d6892ec665f353d829c88e074bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdderss\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FunMe_Owner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sydney Sanders\",\"details\":\"ths implements price feeds as our library \",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a funding contract \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundme.sol\":\"Fundme\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/Fundme.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//Style Guide for Solidiyt\\r\\n//Pragma\\r\\n//Import\\r\\n//Error Codes\\r\\n//contracts\\r\\n//modifiers\\r\\n//revcieve and fallback\\r\\n//functions\\r\\n\\r\\n\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\n//Send Eth or blockchain native token to this contract \\r\\n//Get funds from users\\r\\n//Withdraw funds\\r\\n//set mim value in USD \\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n//best practice to put contractName + error code\\r\\nerror FunMe_Owner();\\r\\n\\r\\n\\r\\n/**@title A contract for crowd funding \\r\\n *@author Sydney Sanders\\r\\n @notice This contract is to demo a funding contract \\r\\n @dev ths implements price feeds as our library \\r\\n\\r\\n\\r\\n */\\r\\n\\r\\n\\r\\ncontract Fundme { \\r\\n    //Type declerations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n\\r\\n    //State variables\\r\\n    mapping(address => uint256) private s_addressToAmountFunded; \\r\\n    //Keep track of who is funding the contract:  \\r\\n    address[]private s_funders; \\r\\n    uint256 public constant  MIN_USD = 50 * 10 ** 18;\\r\\n    //owner doesnt have to be public \\r\\n    address private immutable i_owner; \\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    event Funded(address indexed from, uint256 amount); \\r\\n\\r\\n     modifier onlyOwner { \\r\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\r\\n         if(msg.sender != i_owner) {revert FunMe_Owner();}\\r\\n        _;\\r\\n    }\\r\\n    //Function that gets called, Immeditaley when you call an contract \\r\\n    constructor(address priceFeedAdderss) { \\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAdderss); //s_ == we are spending lots of gas to store this\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable{}\\r\\n    fallback() external payable{}\\r\\n\\r\\n\\r\\n    function fund() public payable { \\r\\n        require(msg.value.getConverstionRate(s_priceFeed) >= MIN_USD,\\\"Didn't send enough\\\" );\\r\\n        //Keep track of donators to contract address\\r\\n        s_funders.push(msg.sender); \\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        emit Funded(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw()  public onlyOwner {\\r\\n        //very expensive function -> reading from storage and updating from storage\\r\\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) { \\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        //reset the array \\r\\n         s_funders = new address[](0);\\r\\n        //actually withdraw the funds\\r\\n        \\r\\n        //3 different ways to send ETH\\r\\n        //transfer send call \\r\\n        \\r\\n        //cast it to an payable address \\r\\n        //Auto reverts if transfer failes\\r\\n        payable(msg.sender).transfer(address(this).balance); //Natie blockchain currency \\r\\n\\r\\n        //send only revert if we add the sendSuccess require\\r\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        require(sendSuccess, \\\"Send failed\\\");\\r\\n\\r\\n        //call most common way of sending \\r\\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner  { \\r\\n        //saved our storage var into a memory var -> get much much cheaper \\r\\n        address[] memory funders = s_funders; \\r\\n        //mappings can't be in memory!\\r\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) { \\r\\n            address funder = funders[funderIndex]; //we are using the memory array\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n\\r\\n        }\\r\\n\\r\\n        s_funders = new address[](0);\\r\\n        (bool success,) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //Be carefully how to interact with storage variables + chaging visiblity improves gas\\r\\n    function getOwner() public view returns(address) { \\r\\n        return i_owner;\\r\\n    }\\r\\n    function getFunders(uint256 index) public view returns(address) { \\r\\n       return s_funders[index];\\r\\n   }\\r\\n\\r\\n    function getAddressToAmountFunded(address funder) public view returns(uint256) { \\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns(AggregatorV3Interface) { \\r\\n        return s_priceFeed;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n \",\"keccak256\":\"0x546e0387ce78baefaa6babdc3b8d9841bc94b1675e541738e9cfc114b234ee9d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter { \\r\\n    //Can't have state vars\\r\\n    //Can't send ether \\r\\n\\r\\n     //get the converion rate of ETH in terms of USD \\r\\n    function getPrice(AggregatorV3Interface priceFeed)   internal view returns(uint256) { \\r\\n         //call the latestround data on the price feed\\r\\n         //All we want is the latest price\\r\\n         (, int256 price, , , ) = priceFeed.latestRoundData();    \\r\\n         //Eth in terms of USD\\r\\n         return uint256(price * 1e10); //1*10 = 1000000000\\r\\n    }\\r\\n\\r\\n    function getVersion()   internal view returns(uint256) { \\r\\n        //ABI\\r\\n        //ADDRESS \\t0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n        return priceFeed.version(); \\r\\n    }\\r\\n\\r\\n    function getConverstionRate(uint256 ethAmount, AggregatorV3Interface priceFeed )  internal view returns (uint256) { \\r\\n        uint256 ethPrice = getPrice(priceFeed); //call get price for price of ETH \\r\\n        uint256 ethAmountinUSD = (ethPrice * ethAmount) / 10**18;  //Math in solidity always multiply then divide\\r\\n        return ethAmountinUSD;\\r\\n\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x29d140d5eeaaf0c021cc79191268ddfa0db83afe569cc1a89127bca88dd12ca2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200145438038062001454833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112ce620001866000396000818161024d0152818161055001528181610728015261091e01526112ce6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101445780639e87a5cd1461016f578063b60d42881461019a578063be2693f0146101a457610086565b80630343fb2514610088578063213dbea2146100c55780633a7b6c74146100f05780633ccfd60b1461012d57610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610b9a565b6101ae565b6040516100bc9190610be0565b60405180910390f35b3480156100d157600080fd5b506100da6101f6565b6040516100e79190610be0565b60405180910390f35b3480156100fc57600080fd5b5061011760048036038101906101129190610c27565b610203565b6040516101249190610c63565b60405180910390f35b34801561013957600080fd5b5061014261024b565b005b34801561015057600080fd5b5061015961054c565b6040516101669190610c63565b60405180910390f35b34801561017b57600080fd5b50610184610574565b6040516101919190610cdd565b60405180910390f35b6101a261059e565b005b6101ac610726565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60006001828154811061021957610218610cf8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d0576040517f50d99b8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561037b576000600182815481106102f6576102f5610cf8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037390610d56565b9150506102d3565b50600067ffffffffffffffff81111561039757610396610d9f565b5b6040519080825280602002602001820160405280156103c55781602001602082028036833780820191505090505b50600190805190602001906103db929190610a90565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610422573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061049c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049390610e2b565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516104c290610e7c565b60006040518083038185875af1925050503d80600081146104ff576040519150601f19603f3d011682016040523d82523d6000602084013e610504565b606091505b5050905080610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053f90610edd565b60405180910390fd5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109b490919063ffffffff16565b101561061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590610f49565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106cf9190610f69565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5243460405161071c9190610be0565b60405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ab576040517f50d99b8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561082f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e5575b5050505050905060005b81518110156108b957600082828151811061085757610856610cf8565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108b190610d56565b915050610839565b50600067ffffffffffffffff8111156108d5576108d4610d9f565b5b6040519080825280602002602001820160405280156109035781602001602082028036833780820191505090505b5060019080519060200190610919929190610a90565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161096090610e7c565b60006040518083038185875af1925050503d806000811461099d576040519150601f19603f3d011682016040523d82523d6000602084013e6109a2565b606091505b50509050806109b057600080fd5b5050565b6000806109c0836109f0565b90506000670de0b6b3a764000085836109d99190610fbf565b6109e39190611048565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190611106565b5050509150506402540be40081610a889190611181565b915050919050565b828054828255906000526020600020908101928215610b09579160200282015b82811115610b085782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab0565b5b509050610b169190610b1a565b5090565b5b80821115610b33576000816000905550600101610b1b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6782610b3c565b9050919050565b610b7781610b5c565b8114610b8257600080fd5b50565b600081359050610b9481610b6e565b92915050565b600060208284031215610bb057610baf610b37565b5b6000610bbe84828501610b85565b91505092915050565b6000819050919050565b610bda81610bc7565b82525050565b6000602082019050610bf56000830184610bd1565b92915050565b610c0481610bc7565b8114610c0f57600080fd5b50565b600081359050610c2181610bfb565b92915050565b600060208284031215610c3d57610c3c610b37565b5b6000610c4b84828501610c12565b91505092915050565b610c5d81610b5c565b82525050565b6000602082019050610c786000830184610c54565b92915050565b6000819050919050565b6000610ca3610c9e610c9984610b3c565b610c7e565b610b3c565b9050919050565b6000610cb582610c88565b9050919050565b6000610cc782610caa565b9050919050565b610cd781610cbc565b82525050565b6000602082019050610cf26000830184610cce565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6182610bc7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9457610d93610d27565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e15600b83610dce565b9150610e2082610ddf565b602082019050919050565b60006020820190508181036000830152610e4481610e08565b9050919050565b600081905092915050565b50565b6000610e66600083610e4b565b9150610e7182610e56565b600082019050919050565b6000610e8782610e59565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ec7600b83610dce565b9150610ed282610e91565b602082019050919050565b60006020820190508181036000830152610ef681610eba565b9050919050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610f33601283610dce565b9150610f3e82610efd565b602082019050919050565b60006020820190508181036000830152610f6281610f26565b9050919050565b6000610f7482610bc7565b9150610f7f83610bc7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fb457610fb3610d27565b5b828201905092915050565b6000610fca82610bc7565b9150610fd583610bc7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561100e5761100d610d27565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061105382610bc7565b915061105e83610bc7565b92508261106e5761106d611019565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61109881611079565b81146110a357600080fd5b50565b6000815190506110b58161108f565b92915050565b6000819050919050565b6110ce816110bb565b81146110d957600080fd5b50565b6000815190506110eb816110c5565b92915050565b60008151905061110081610bfb565b92915050565b600080600080600060a0868803121561112257611121610b37565b5b6000611130888289016110a6565b9550506020611141888289016110dc565b9450506040611152888289016110f1565b9350506060611163888289016110f1565b9250506080611174888289016110a6565b9150509295509295909350565b600061118c826110bb565b9150611197836110bb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111d6576111d5610d27565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561121357611212610d27565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112505761124f610d27565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561128d5761128c610d27565b5b82820290509291505056fea264697066735822122087af469c729a24da91a03e4aea7afb9ecd5e83a9a09792691f413b7f18b23b8764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101445780639e87a5cd1461016f578063b60d42881461019a578063be2693f0146101a457610086565b80630343fb2514610088578063213dbea2146100c55780633a7b6c74146100f05780633ccfd60b1461012d57610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610b9a565b6101ae565b6040516100bc9190610be0565b60405180910390f35b3480156100d157600080fd5b506100da6101f6565b6040516100e79190610be0565b60405180910390f35b3480156100fc57600080fd5b5061011760048036038101906101129190610c27565b610203565b6040516101249190610c63565b60405180910390f35b34801561013957600080fd5b5061014261024b565b005b34801561015057600080fd5b5061015961054c565b6040516101669190610c63565b60405180910390f35b34801561017b57600080fd5b50610184610574565b6040516101919190610cdd565b60405180910390f35b6101a261059e565b005b6101ac610726565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60006001828154811061021957610218610cf8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d0576040517f50d99b8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561037b576000600182815481106102f6576102f5610cf8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037390610d56565b9150506102d3565b50600067ffffffffffffffff81111561039757610396610d9f565b5b6040519080825280602002602001820160405280156103c55781602001602082028036833780820191505090505b50600190805190602001906103db929190610a90565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610422573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061049c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049390610e2b565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516104c290610e7c565b60006040518083038185875af1925050503d80600081146104ff576040519150601f19603f3d011682016040523d82523d6000602084013e610504565b606091505b5050905080610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053f90610edd565b60405180910390fd5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109b490919063ffffffff16565b101561061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590610f49565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106cf9190610f69565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5243460405161071c9190610be0565b60405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ab576040517f50d99b8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561082f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e5575b5050505050905060005b81518110156108b957600082828151811061085757610856610cf8565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108b190610d56565b915050610839565b50600067ffffffffffffffff8111156108d5576108d4610d9f565b5b6040519080825280602002602001820160405280156109035781602001602082028036833780820191505090505b5060019080519060200190610919929190610a90565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161096090610e7c565b60006040518083038185875af1925050503d806000811461099d576040519150601f19603f3d011682016040523d82523d6000602084013e6109a2565b606091505b50509050806109b057600080fd5b5050565b6000806109c0836109f0565b90506000670de0b6b3a764000085836109d99190610fbf565b6109e39190611048565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190611106565b5050509150506402540be40081610a889190611181565b915050919050565b828054828255906000526020600020908101928215610b09579160200282015b82811115610b085782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab0565b5b509050610b169190610b1a565b5090565b5b80821115610b33576000816000905550600101610b1b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6782610b3c565b9050919050565b610b7781610b5c565b8114610b8257600080fd5b50565b600081359050610b9481610b6e565b92915050565b600060208284031215610bb057610baf610b37565b5b6000610bbe84828501610b85565b91505092915050565b6000819050919050565b610bda81610bc7565b82525050565b6000602082019050610bf56000830184610bd1565b92915050565b610c0481610bc7565b8114610c0f57600080fd5b50565b600081359050610c2181610bfb565b92915050565b600060208284031215610c3d57610c3c610b37565b5b6000610c4b84828501610c12565b91505092915050565b610c5d81610b5c565b82525050565b6000602082019050610c786000830184610c54565b92915050565b6000819050919050565b6000610ca3610c9e610c9984610b3c565b610c7e565b610b3c565b9050919050565b6000610cb582610c88565b9050919050565b6000610cc782610caa565b9050919050565b610cd781610cbc565b82525050565b6000602082019050610cf26000830184610cce565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6182610bc7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9457610d93610d27565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e15600b83610dce565b9150610e2082610ddf565b602082019050919050565b60006020820190508181036000830152610e4481610e08565b9050919050565b600081905092915050565b50565b6000610e66600083610e4b565b9150610e7182610e56565b600082019050919050565b6000610e8782610e59565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ec7600b83610dce565b9150610ed282610e91565b602082019050919050565b60006020820190508181036000830152610ef681610eba565b9050919050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610f33601283610dce565b9150610f3e82610efd565b602082019050919050565b60006020820190508181036000830152610f6281610f26565b9050919050565b6000610f7482610bc7565b9150610f7f83610bc7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fb457610fb3610d27565b5b828201905092915050565b6000610fca82610bc7565b9150610fd583610bc7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561100e5761100d610d27565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061105382610bc7565b915061105e83610bc7565b92508261106e5761106d611019565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61109881611079565b81146110a357600080fd5b50565b6000815190506110b58161108f565b92915050565b6000819050919050565b6110ce816110bb565b81146110d957600080fd5b50565b6000815190506110eb816110c5565b92915050565b60008151905061110081610bfb565b92915050565b600080600080600060a0868803121561112257611121610b37565b5b6000611130888289016110a6565b9550506020611141888289016110dc565b9450506040611152888289016110f1565b9350506060611163888289016110f1565b9250506080611174888289016110a6565b9150509295509295909350565b600061118c826110bb565b9150611197836110bb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111d6576111d5610d27565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561121357611212610d27565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112505761124f610d27565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561128d5761128c610d27565b5b82820290509291505056fea264697066735822122087af469c729a24da91a03e4aea7afb9ecd5e83a9a09792691f413b7f18b23b8764736f6c63430008080033",
  "devdoc": {
    "author": "Sydney Sanders",
    "details": "ths implements price feeds as our library ",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a funding contract ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}